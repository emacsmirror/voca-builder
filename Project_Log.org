* NEXT try popup
:LOGBOOK:  
CLOCK: [2015-03-16 Mon 11:31]--[2015-03-16 Mon 11:45] =>  0:14
CLOCK: [2015-03-16 Mon 10:38]--[2015-03-16 Mon 11:07] =>  0:29
CLOCK: [2015-03-16 Mon 07:45]--[2015-03-16 Mon 10:38] =>  2:53
:END:      
[2015-03-16 Mon 07:45]


Elements of popup-list have to be popup items. A popup item is substantially a string but it may involve some text-properties. There are two ways to make popup items. One is just using strings. Another is to use the popup-make-item function, which just returns the string after adding text-properties of its keywords. Effective text-properties are:

(string + text-properties) --> (popup item) --> (popup list) 


- value 
- inline summary: i need this
- 


(popup-make-item NAME &key VALUE FACE MOUSE-FACE SELECTION-FACE
SUBLIST DOCUMENT SYMBOL SUMMARY)

what i need is 

(popup-make-item NAME &key "apple" nil nil nil nil nil nil "apple is a kind of xxxx \n this word is from chinese")


Create a popup instance  at =point= with =width= and =height=
(popup-create point width height &key min-height max-width around face
selection-face scroll-bar margin-left margin-right symbol parent
parent-offset) 

use =popup-tip= to show message.
 

(popup-tip "lalala")


#+begin_src plantuml :file img/try_popup.png 
:cursor under a word;
:hit a key;
:read in the word as voca (eww, then eww-view-source); 
partition my/voca-lookup {
:fetch the html content;
:parse the html content;
:return meaning and origins;
}

partition popup {
:popup-tip meaning and origins;
}
partition Save_Voca {
:fetch the sentence at point;
:open vocabulary.org file;
:go to the end; 
:createa a org node; 
:insert meaning and origins;
:insert sentence; 
}

#+end_src

#+results:
[[file:img/try_popup.png]]


- [ ] read in word/sentence 
  (thing-at-point 'word)
  (thing-at-point 'sentence) 
- [ ] fetch html 
  (eww-browser-utl (contact "www.vocabulary.com/dictionary/" voca))
  (eww-view-source)
- [ ] parse meaning and origins 
  ;; copy to a temp buffer 
  ;; search for <div id="dictionaryContent" >
  ;; search for <p class="short">, copy the line, replace <i> and </i> with /, remove </p>, 
  ;; save the line as meaning 
  ;; search for <p class="long">, copy the line, remove </p>, 
  ;; save the line as orgins
  ;; return a list of two string. 
  
(setq voca "apple")
;; fetch html content of vocabulary.com/dictionary/apple 
;; parse the html content, get the 'meanings and 'origins 

(popup-tip (concat meanings origins))

;; add new voca to 
 vocabuary.org
[2015-03-16 Mon 11:45]
* Emacs package development 
:LOGBOOK:  
CLOCK: [2015-03-22 Sun 16:52]--[2015-03-22 Sun 17:45] =>  0:53
:END:      

first, define a customised group for my pakcage, 

(defgroup voca-builder nil
  "Group voca-builder entries according to their version control status."
  :prefix "voca-builder-"
  :group 'convenience)

then define a customised variblaes, 

(defcustom voca-builder-record-voca-p t
  "If non-nil, record the vocabulary looked-into and save to voca-builder-voca-file."
  :type 'boolean
  :group 'voca-builder)

(defcustom voca-builder-voca-file "~/.vocabulary.org"
:type 'string 
:group 'voca-builder)


ref: 

[[https://github.com/purcell/ibuffer-vc/blob/master/ibuffer-vc.el][Purcell's ibuffer-vc package]]

[[https://github.com/abo-abo/org-download/blob/master/org-download.el][abo-abo's org-download package]]


