(load "/Users/yitang/git-others/ox-rst/ox-rst.el")
(setq org-export-with-author nil)
(setq org-export-with-section-numbers nil)
* DONE NEXT updates
  CLOSED: [2015-06-17 Wed 21:24]
:LOGBOOK:  
CLOCK: [2015-06-17 Wed 17:12]--[2015-06-17 Wed 17:57] =>  0:45
CLOCK: [2015-06-17 Wed 17:10]--[2015-06-17 Wed 17:11] =>  0:01
:END:      
[2015-06-17 Wed 14:43]

- [X] move this file to voca-builder/docs
- [X] replace all the values in EXPORT_FILE_NAME, due to default
  folder changes of this documents. 
- [X] copy img folder to docs/img


* Welcome to voca-builder					 :ExportFile:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:END:      

voca-builder is an Emacs package that was developed to help you build
up your vocabulary. It automates most of the steps in the process, so
that you could 
1. spent more time in actually memorising learning new
   words leave the tedious origination tasks for voca-builder.
2. focus on your reading with minimal distribution, I.e. switch app
   and/or check direction.
3. smart process that helps you memoerise the new vocabulary. 

If you are learning a foreign language, you know how tedious and
time-consuming it is to check a new word that you are not familiar
with. It breaks you reading-flow, and therefore decrease your
efficient.

vocab-builder provides excellent functionality that will do the
checking for you, and shows the meaning as a popup above the text that
you are reading. It also records the meaning and the sentence
containing the word. All you need to do is press a key.

It can also groups the vocabulary an later on, you can export new
vocabularies based on tags or time period.

For full documentation on this package, please see the wiki page.
* Installation 							 :ExportFile:
:PROPERTIES:
:EXPORT_FILE_NAME: installation
:END:
[2015-06-17 Wed 10:41]

The recommended way to install voca-builder is via =package.el=, the build-in
package manager in Emacs.

voca-builder.el is available on the major community maintained
repositories [[http://melpa.org/]]. You can install =voca-builder= with the
following command:

~M-x package-install [RET] voca-builder [RET]~

or by execute this bit of Emacs Lisp code

#+begin_src emacs-lisp :results silent 
(unless (package-installed-p 'voca-builder)
  (package-install 'voca-builder))
#+end_src

If the installation doesn't work try to refresh the package list:

~M-x package-refresh-contents [RET]~

You can also install manually with two steps: first clone this
repository, then add the directory containing voca-builder.el to
Emacs's search path as follows:

#+begin_src emacs-lisp :results silent 
(add-to-list 'load-path "~/path/to/voca-builder.el/")
(require 'voca-builder)
#+end_src

* Configuration                                                  :ExportFile:
:PROPERTIES:
:EXPORT_FILE_NAME: configuration
:END:
[2015-06-17 Wed 10:52]

To see all the configurable settings in voca-builder, type 

~M-x customize-group [RET] voca-builder [RET]~

and you are able to customise these variables directly. However, the
recommended way to do is to add the non-interaactive way. 

The important variables are: 
- voca-builder/voca-file :: where you wanna to save the new vocabulary
     and their meanings to, the default is ~/.vocabulary
- voca-builder/current-tag :: which tags should added to the
     vocabulary nodes. The default is "GENE" (general). 
- voca-builder/export-file :: where to save the exported vocabularies. 

The following is a sample. 

#+begin_src emacs-lisp
(setq voca-builder/voca-file "~/git/Learning/Emacs_Voca/voca_example.org") 
(setq voca-builder/current-tag "Demo")
(setq voca-builder/export-file "~/voca-builder-temp.org")
#+end_src

I read all the time and frequently confront words that I am not
familiar with, so I bind the keystroke ~F4~ to shows the meaning
quickly. 

#+begin_src emacs-lisp :results silent 
(global-set-key (kbd "<f4>") 'voca-builder/search-popup)
#+end_src


* Usage                                                          :ExportFile:
:PROPERTIES:
:EXPORT_FILE_NAME: usage
:END:
** Fetch the meaning 
[2015-06-17 Wed 11:12]

If I would like to know what the meaning of *search* means in English,
I moved the cursor to /c/ under /search/, and press ~F4~. The meaning
will popup up under the word, as shown below. I don't have to switch
to a dictionary app and it won't break my read-flow. 

[[./img/Poup-show-.png]] 

Also, as the echo area shows, the full meaning and also the full
sentence will be added to the voca-file. 

Here is a real example when I was reading an article.

[[./img/Popup-real-example.png]]

** Export vocabularies by tags
[2015-06-17 Wed 11:12]

It is useful when you want to group vocabularies and revise
them altogether, for example, all the biology terms. You can do it
using =voca-builder/extract-by-tags= function. For example, 

#+begin_src emacs-lisp :results silent 
(voca-builder/extract-by-tags "Demo")
#+end_src

will export all the vocabularies that are tagged by "Demo" to
~/voca-builder-temp.org. 

[[./img/Export-Tag-Demo.png]] 

** Export vocabularies by date 
[2015-06-17 Wed 11:12]

You may also want to export all the new vocbaulary you learnt during
one particular period, like a semaster, an academic year using
=voca-builder/extract-period= function. For example
#+begin_src emacs-lisp :results silent 

(voca-builder/extract-period "2015-01-05" "2015-04-01")
#+end_src
will export all the vocabularies that are recorded between "2015-01-05" and
"2014-04-01". 

[[./img/Export-Tag-Demo-Period-Range.png]]

Note you can combine these two function together. 
* Appendix                                                       :ExportFile:
:PROPERTIES:
:EXPORT_FILE_NAME: appendix
:END:
[2015-06-17 Wed 15:38]
** It Make Your Life Easier 

Image the process you want to look in a new word, it probably would
like this:
1. put down the book you reading,
2. find the dictionary or open the app, 
3. repeat step 1-2 few times if the vocabulary is quit complex, 
4. now you get the meaning, trying to comprehensive it,
5. then you write it down in a note book, with the meaning,
6. if you are very serious, you probably write down the sentence as an example,
7. after all these, you go back to continue reading but lost the flow. 

What if you can do the step 1-6 automatically, and immediately as you
thought you wanna see what's the meaning of a word? This is what
voca-bulder can do for you, all you need to do is press F4 (the
default setting), without leaving Emacs, searching and recording.
Sounds pretty cool is it?

Even more important, you can quary your vocbaulary database, and
search, for example, if you are prepare an interview in banking
sector, you can bring up all the banking related terminology, and
study them all together, or you wanna strength your memmoery and wants
to remmeber again before you forget, you can bring up all the words
you learnt last week, or this month etc.

** Human-Friendly Dictionary Database 
take conciousness for example, definition from oxford is

: [MASS NOUN] The state of being aware of and responsive to one’s surroundings:

while for vocabuary.com, it has more human friendly defition, which
are for human, and edited by humans.

: When you are awake and aware of your surroundings, that's consciousness. There are different types of consciousness, including social consciousness, being aware of injustices in society.

: The early Latin word conscius meant "with knowing," but it meant a shared knowledge, a meaning that was retained through the 16th Century. John Locke was the first to describe consciousness in relation to the individual, referring to it as “the perception of what passes in a man’s own mind." If you lose consciousness during the performance, we'll wake you up with some smelling salts!

(org-map-entries 'yt/org-export-this-header "+ExportFile")

* Make&Index								 
:PROPERTIES:
:EXPORT_FILE_NAME: lalal
:END:
[2015-06-17 Wed 17:24]

(org-map-entries 'yt/org-export-this-header "+ExportFile")

#+name: all-files 
#+BEGIN_SRC emacs-lisp :results raw
(setq all-files (org-map-entries '(lambda ()
		    (org-entry-get (point) "EXPORT_FILE_NAME"))
"+ExportFile"))
#+END_SRC

#+results: all-files
(index installation configuration usage nil nil nil appendix nil nil)


#+BEGIN_SRC emacs-lisp 

#+END_SRC



.. toctree::
   :maxdepth: 2
   :caption: Documentation

   welcome-to-vocabuilder 
   installation 
   configuration
   usage
   appendix
* workflow
  [2015-06-17 Wed 21:45]
#+begin_src emacs-lisp :results silent 
;; workflow for org --> rst for spnix
;; dependes on jekyll-make-slug 

;; set export file name to heading
(defun yt/org-header-as-filename ()
  (interactive)
  (let* ((header (nth 4 (org-heading-components)))
         (filename (jekyll-make-slug header)))
    (if (and (string-match-p "welcome" filename)
             (string-match-p "to" filename))
        (org-set-property "EXPORT_FILE_NAME" "index")
      (org-set-property "EXPORT_FILE_NAME" filename)))
  (org-toggle-tag "ExportFile" 'on))

;;
(defun yt/org-export-this-header ()
  (let* ((export-file-name (org-entry-get (point) "EXPORT_FILE_NAME"))
         (header (nth 4 (org-heading-components)))
         (output-file (concat default-directory  export-file-name ".rst")))
    (when export-file-name ;; if it has no EXPORT_FILE_NAME property, skip 
      (org-copy-subtree)
      ;; (message export-file-name)
      (with-temp-buffer 
        (org-yank)
        (goto-char (point-min))
        ;; (kill-line 1)
        ;; (insert (concat "#+TITLE: " header "\n"))
        (org-export-to-file 'rst (concat output-file) nil t)
        (when (and (string-match-p "welcome" header)
                   (string-match-p "to" header))
          (let ((output-file (concat default-directory "README.org")))
            ;; (insert (concat "# " header "\n"))
            (org-export-to-file 'org output-file nil nil)
            (shell-command (concat "mv " output-file " ..")) ;; TODO: simply this line
            )
          )))))

        
))


;; ;;
;; (defun yt/org-export-this-header ()
;;   (let* ((export-file-name (org-entry-get (point) "EXPORT_FILE_NAME"))
;;          (header (nth 4 (org-heading-components)))
;;          (output-file (concat default-directory  export-file-name ".rst")))
;;     (when export-file-name ;; if it has no EXPORT_FILE_NAME property, skip 
;;       (org-copy-subtree)
;;       (message export-file-name)
;;       (with-temp-buffer 
;;         (org-yank)
;;         (goto-char (point-min))
;;         (kill-line 1)
;;         (insert (concat "#+TITLE: " header "\n"))
;;         (org-export-to-file 'rst (concat output-file))))))
#+end_src
